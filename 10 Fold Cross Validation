{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNgK1um5Qlg5OI2Kl9pEVWM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","from sklearn.model_selection import KFold\n","from sklearn.datasets import load_iris\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","import pandas as pd\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import classification_report,confusion_matrix\n","from sklearn import metrics"],"metadata":{"id":"Df0jVC8AwzZY","executionInfo":{"status":"ok","timestamp":1695116976794,"user_tz":-330,"elapsed":398,"user":{"displayName":"sai saipujari","userId":"18199314792418378792"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Load data from Google Drive\n","data_path=r\"https://raw.githubusercontent.com/venky14/iris-dataset/master/iris-species/Iris.csv\"\n","df = pd.read_csv(data_path)\n","\n","# Split data into features (X) and labels (y)\n","X = df.drop('Species', axis=1)  # Adjust target_column_name to your dataset\n","y = df['Species']\n","\n","# Load the iris dataset\n","iris = load_iris()\n","\n","# Initialize decisiontree classifier\n","clf = DecisionTreeClassifier()\n","\n","# Initialize K-Fold Cross-Validator with 10 folds\n","kf = KFold(n_splits=10, shuffle=True, random_state=42)"],"metadata":{"id":"HxmQuyxdxGIQ","executionInfo":{"status":"ok","timestamp":1695117538350,"user_tz":-330,"elapsed":392,"user":{"displayName":"sai saipujari","userId":"18199314792418378792"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Perform 10-fold cross-validation\n","fold_accuracies = []\n","\n","for train_index, test_index in kf.split(X):\n","    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n","    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n","\n","    clf.fit(X_train, y_train)\n","\n","    # Make predictions on the test data\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate accuracy for this fold\n","    accuracy = accuracy_score(y_test, y_pred)\n","    fold_accuracies.append(accuracy)\n","\n","# Calculate the average accuracy across all folds\n","average_accuracy = np.mean(fold_accuracies)\n","\n","# Print the results\n","print(f\"Accuracy for each fold: {fold_accuracies}\")\n","print(f\"Average Accuracy: {average_accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ACc8T8KLx4jF","executionInfo":{"status":"ok","timestamp":1695117933963,"user_tz":-330,"elapsed":629,"user":{"displayName":"sai saipujari","userId":"18199314792418378792"}},"outputId":"9254d7d9-9962-4f69-d80e-bf9c8ae58e98"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy for each fold: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8666666666666667, 1.0, 1.0]\n","Average Accuracy: 0.9866666666666667\n"]}]}]}